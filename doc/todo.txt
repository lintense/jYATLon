
How do I test code that should never be executed?

I think it is wrong to hide the so called 
in order to attemp 100% coverage.
Reason for having those throws can be to help debugging are in direct line with a fail-fast approach.
Full coverage does not ensure proper testing anyway.
Also, having these none covered stuff can be helpful to orient further design.
Stop hiding the errors and start fixing the problems!

-=-=-

TO_TEST: What happen when using expressions containing many aliases?
!true==false
X (ok)
X,Y (syntax sugar: wait)
(X,Y):Z 
Z.X:ZX
(Z:Z1,Z:Z2):W
(Z^sizeOf(X)):W
with indexOf(Z1.X) < indexOf(Z2.X)

### FILTERING ###

{begin (X^sizeOf(Y)):Z with any (*A*A*) && no (*A*A*A*) } // weird but good! 2 similar but not 3.
(*A*A*) = at least 2 similar
(*A,A*) = 2 consecutive similar
all (*A,A*) = all (*A*A*) = all consecutives are similar
no (*A,A*) = no consecutives are similar
(A*A) = first and last are similar
no (A*A) = first and last are not similar
// _ means any existing value
// * means any value or nothing
// A matches A

// B can match A so need a condition (B with B != A). I do not like !A...
(*A*B*) && A<B there is an A before B that is smaller (Numerical only?)
(*A*B*) && no A>B no A before B is larger
(*A,B*) && A!=B 
2x (*A*A*) && all indexOf(A)<indexOf(B) = exactly 2 pairs are similar as in (1,1,2,3),(1,2,2,3),...
	(*A*B*) && index

($:X^sizeOf(X)):Z with (*A*B*) && indexOf(A)<indexOf(B)

withExp
	: matchingExp (logicalOp matchingExp)
	;
matchingExp
	: (notOp SPACE+)? '(' matchingOp? aliasName (matchingOp aliasName)* matchingOp? ')' // default notOp = any
	: (notOp SPACE+)? binaryExp // default notOp = all
	;
matchingOp
	: '*' | ','
	;
notOp
	: 'no' | 'all' | 'any' | '1x' | '2x' // any is the default for (...), all is the default for <>=
	;

-=-=-

>>>TEST: Deffered blocks
>>>DESC: This is ok because we do not need all the X to start processing the X block.
The we can compute X when processing the Y block
>>>ROOT: 
>>>TEMPLATE:

{begin X}
{begin Y}
{{Y.getY:X}}
{end Y}
{end X}

>>>EXPECTED:

-=-=-

>>>TEST: 
>>>DESC: 
>>>ROOT: 
>>>TEMPLATE:
>>>EXPECTED:

-=-=-

>>>TEST: Simple tupples
>>>DESC: Create new combinations based on tuples
>>>ROOT: [1,2,3]
>>>TEMPLATE:
{begin ($,$,$):Z with $.filter(Z)}%%% An explicit filter would be better but out of scope for now...
{{Z}}%%%
{between Z},%%%
{after Z}

{end Z}
>>>EXPECTED:

-=-=-

>>>TEST: Simple tupples
>>>DESC: Create new combinations based on tuples
>>>ROOT: [1,2,3]
>>>TEMPLATE:
{begin ($:X,X,X):Z}
{{Z}}
{between Z},%%%
{after Z}
{end Z}
>>>EXPECTED:

-=-=-

>>>TEST: Simple tupples
>>>DESC: Create new combinations based on tuples
>>>ROOT: [1,2,3]
>>>TEMPLATE:
{begin ($:X,X,X):Z}
{{Z}}
{begin Z.X}({{indexOf(Z.X)}})-{{Z.X}}{between Z.X},{end Z.X}
{between Z},{after Z}{end Z}
>>>EXPECTED:

-=-=-

>>>TEST: Simple tupples
>>>DESC: Create new combinations based on tuples
>>>ROOT: [1,2,3]
>>>TEMPLATE:
{begin ($:X1, X1:X2, X2:X3):Z}
{{Z}}
{{X1}}-{{X2}}-{{X3}}
{between Z},{after Z}{end Z}
>>>EXPECTED:

-=-=-

>>>TEST: Simple tupples
>>>DESC: Create new combinations based on tuples
>>>ROOT: [1,2,3]
>>>TEMPLATE:
{begin ($:X^sizeOf(X)):Z}
{{Z}}
{end Z}
{begin (X^sizeOf($:X):Z}
{{Z}}
{end Z}
>>>EXPECTED:

-=-=-

>>>TEST: Simple tupples
>>>DESC: Create new combinations based on tuples
>>>ROOT: [1,2,3]
>>>TEMPLATE:
{begin ($:X^sizeOf(X)):Z}
{{Z}}
{end Z}
{begin (X^sizeOf($:X):Z}
{{Z}}
{end Z}
>>>EXPECTED:

-=-=-

>>>TEST: Alias list in begin
>>>DESC: A simple rewriting rule that remove some lines from the script.
Not necessary for now but usefull when the script will get bigger.
>>>ROOT: {"coll4" : [
{"coll3" : [{"coll2" : [101,102]},{"coll2" : [103,104]},{"coll2" : [105,106]}]},
{"coll3" : [{"coll2" : [201,202]},{"coll2" : [203,204]},{"coll2" : [205,206]}]},
{"coll3" : [{"coll2" : [301,302]},{"coll2" : [303,304]},{"coll2" : [305,306]}]},
{"coll3" : [{"coll2" : [401,402]},{"coll2" : [403,404]},{"coll2" : [405,406]}]}
]}
>>>TEMPLATE:
{begin X,Y,Z}
{{index(X)}}{{index(Y)}}{{index(Z)}}{{X}}{{Y}}{{Z}}
{end X,Y,Z}
>>>EXPECTED:

-=-=-

>>>TEST: Test vs value
>>>DESC: Test what happen when the test of a value is required to compute the value itself.
Also, test the opposite!
>>>ROOT: [10,20,30]
>>>TEMPLATE:

{begin X}
{{if $:X>15 X}}
{{if Y>25 $:Y}}
{end X}

>>>EXPECTED:
20
30
30

-=-=-

>>>TEST: Hello Wrold
>>>DESC: Introduction to YATL
>>>ROOT: "World"
>>>TEMPLATE: {begin ALIAS}Hello {{$:ALIAS}}!{end ALIAS}
>>>EXPECTED: Hello World!

-=-=-

>>>TEST: Using sizeOf inside operation
>>>DESC: Be able to use indexOf and sizeOf inside operation.
The problem is we need all the values precomputed before we can iterate and provide index and size...
NOTE: If X is dependent of index/size of X, then the chain cannot return a collection since only ONE value of X can be associated with that index/size.
Need to implement a way to emulate a 'call' function from a Map. Use get.

>>>ROOT: {"coll" : ["a","b","c"], "1" : "aa", "2" : "bb", "3" : ["c1", "c2", "c3"]}

>>>TEMPLATE:

{{$.get(indexOf(X)):X}}%%% Must return a single (non null) value that matches X for that index. No way to determine the size of X but any error will stop the process since that index would NOT be valid.
{{$.get(indexOf(X)).getX:X}}%%% Same as above, only ONE value can be returned. The value MUST respond to getX that MUST return a value. So we can iterate and stop at any error.
{{$.get(sizeOf(X)):X}}%%% MUST return a collection with the size that matches.

{begin X}
X={{$.coll:X}}
{begin Y}
Y={{$.get(indexOf($.coll:X)):Y}}%%% It is possible to compute the maximum size of X (which is the size of $ in this case)
{end Y}
{end X}

>>>EXPECTED:

-=-=-

>>>TEST: Chain operation returning collections
>>>DESC: Need to validate when many operations are chained and each of them returns a collection.
- Each operation that returns a collection MUST have an associated alias.
- Each of these operation will create a new combination for the corresponding alias.

>>>ROOT: {"coll4" : [
{"coll3" : [{"coll2" : [101,102]},{"coll2" : [103,104]},{"coll2" : [105,106]}]},
{"coll3" : [{"coll2" : [201,202]},{"coll2" : [203,204]},{"coll2" : [205,206]}]},
{"coll3" : [{"coll2" : [301,302]},{"coll2" : [303,304]},{"coll2" : [305,306]}]},
{"coll3" : [{"coll2" : [401,402]},{"coll2" : [403,404]},{"coll2" : [405,406]}]}
]}

>>>TEMPLATE:

{begin A1}
{begin A2}
{begin A3}
{{$.coll4:A1.coll3:A2.coll2:A3}}
{end A3}
{end A2}
{end A1}


>>>EXPECTED:

-=-=-

{begin FUNC_TYPE}
{begin PARM }
{{Relation.parms:PARM}}
{between PARM}
, %%%
{end PARM}
{end FUNC_TYPE }


{begin CHAIN}%%% Is this needed?
{{call Relation($.chains:CHAIN) $.block}}%%% Call Main entry block
{end CHAIN}

=== Relation(CHAIN) === %%% Main entry is a relation
~{{$.block:X}}

{begin FUNC_TYPE}
{begin PARM }
{begin PARM_TYPE}
public {{CHAIN.possibleMainOutputTypes(Relation):FUNC_TYPE}} func(%%%
{{CHAIN.possibleMainOutputTypes(PARM):PARM_TYPE}} p{{Relation.parms:PARM}}%%%
);
{{indexOf(PARM)}}
{{indexOf(FUNC_TYPE)}}
{end PARM_TYPE}
{between PARM}
, %%%
{end PARM}
{end FUNC_TYPE }
