TODO

- What happens when {{$:alias}} {{X:alias}} {{Y:alias}} the same alias is defined in many places?


HIGH: Implement {before ALIAS}, {between ALIAS}, {after ALIAS}, {empty ALIAS}
- Must find a way to know in which order to evaluate the ValueBlock during BlockBuilder phase


HIGH: show alias value {{ALIAS}}

QUESTION: What happens when there is no associated alias to a block?

Add logging
- Add debug info in complex process handling to help out users
- No dependency


Add error position in errors
- Create an error class (to differentiate from IllegalStateException)

LOW: Struct states should be ordered, not because it is necessary but to ease comparison between versions.
LOW: Implement {begin ALIAS |"|",|");}

Build a tiny jar file

Deploy in the cloud!
https://blog.travis-ci.com/2017-03-30-deploy-maven-travis-ci-packagecloud/


INTERESTINGLY...
- Some use case of using jYATLon inside itself:
	- To extract and dump the Struct during testing
	- To generate the Struct class
	- To generate the Root interface...

-=-=-
Have a test case with the Alias asked before it is actualy defined

{begin X}
{{X}}
{{$:X}}
{end X}


Integer[][] test = {{1,2},{2},{}};

{begin A}a{begin B}
b{{$:A.B}}



	
	
	
	
-=-=-	

=== String ===
	$ is a String (hence we have {call String $})
	call String is used unambiguously
=== String/String ===
	call String/String is used unambiguously

How to validate the destinations?

{begin X}{{$:X}}{{call .../String $.toString}}{end X}\n=== String ===\n1{{call .../String $}}\n=== String/String ===\n2\n=== .../String ===\n3"

{{$}}\n=== .../String ===\n=== .../String ===

    	String templateContent = "{begin X}{{$:X}}{{call .../String $.toString}}{end X}\n=== String ===\n1{{call .../String $}}\n=== String/String ===\n2\n=== .../String ===\n3";

ADD TO TESTS:
		
"{{$}}\n=== .../String ===\n=== .../String ===";
Duplicated path name: === String ===

"{{call String:Y $}}\n=== String:X ===\n=== String:Y ===\n1"
1

"{{call String $}}\n=== String:X ===\n=== String:Y ===\n1"
java.lang.IllegalStateException: Many destination found for call String

"{{call .../String/String:Y $}}\n=== .../String/String:X ===\n=== .../String:Y ===\n1"
1

"{begin X}{{X}}{empty X}{{X}}{end X}";
java.lang.IllegalStateException: Invalid reference in {empty X}
